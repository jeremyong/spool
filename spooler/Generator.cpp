#include "Generator.hpp"
#include "Database.hpp"

#include <cstring>

Generator::Generator(Database& db, std::FILE* fp)
    : db_{db}
    , fp_{fp}
{
}

void Generator::write_strings()
{
    static const char* h1 =
        "// AUTOGENERATED BY spooler/Generator.{h,c}pp\n"
        "\n"
        "// fs = flattened strings\n"
        "static const char* fs[] = {\n";

    std::fwrite(h1, 1, strlen(h1), fp_);

    Statement query = db_.prepare("SELECT ROWID, string, ref_count FROM strings ORDER BY ROWID ASC");
    int cursor = 0;
    while (auto result = query.step<int, std::string, int>())
    {
        auto&& [id, str, ref_count] = *result;
        // SQL rows are 1-indexed
        id = id - 1;
        while (id > cursor)
        {
            fwrite("\"\",", 1, 2, fp_);
            ++cursor;
        }

        if (ref_count == 0)
        {
            fwrite("\"\",", 1, 2, fp_);
        }
        else
        {
            std::fputc('"', fp_);
            std::fwrite(str.data(), 1, str.size(), fp_);
            std::fputs("\",", fp_);
        }
        ++cursor;
    }
    query.reset();
    std::fputs("\n};\n\n", fp_);
}

void Generator::write_source_chunks()
{
    static const char* h2 =
        "\n"
        "// sc = source chunks \n"
        "static const char** sc[] = {\n";

    std::fputs(h2, fp_);
    Statement query = db_.prepare("SELECT path_id, id FROM flat_offsets ORDER BY path_id, ROWID ASC");

    int last_path_id = -1;
    int cursor = 0;

    while (auto result = query.step<int, int>())
    {
        auto&& [path_id, id] = *result;
        if (path_id != last_path_id)
        {
            offsets_.emplace_back(cursor);
        }

        std::fputs("fs + ", fp_);
        // Don't forget, SQL rows are 1-indexed
        std::fputs(std::to_string(id - 1).c_str(), fp_);
        std::fputc(',', fp_);

        ++cursor;
        last_path_id = path_id;
    }
    query.reset();

    std::fputs("\n};\n\n", fp_);
}

void Generator::write_offsets()
{
    static const char* h3 =
        "\n"
        "// The final boss\n"
        "const char*** spool_strings_[] = {\n";

    std::fputs(h3, fp_);

    for (auto offset : offsets_)
    {
        std::fputs("sc + ", fp_);
        std::fputs(std::to_string(offset).c_str(), fp_);
        std::fputc(',', fp_);
    }

    std::fputs("\n};\n", fp_);
}
